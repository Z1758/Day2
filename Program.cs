namespace Day2
{
    internal class Program
    {
        static void Main(string[] args)
        {
            #region 상수 주석
            int myNum1 = 1;
            int myNum2 = 2;

            //상수 = 변하지 않는 수 
            //변수 앞에 const 키워드를 추가해서 사용
            //주로 잘 바뀌지 않아야 하는 값에 사용함
            //상수는 대문자로만 쓰는 경우도 있음
            //상수는 초기화가 필수

            const int myNum3 = 3;
            #endregion

        }
    }
}

#region 변수 주석
//변수
//데이터를 저장하기 위해 이름을 할당받은 메모리 공간
//저장 된 값은 변경 가능

//선언한 변수에 값을 할당하는 과정을 초기화라고 함
//선언과 초기화 동시 진행 가능

//변수명은 유의미하고 직관적이고 기억하기 쉽게
//카멜 표기법 ex) helloInt

//변수명은 중복 되지 않는다
//변수는 소문자 시작이 국룰 함수는 대문자 시작이 국룰

// 논리형
// bool 논리 자료형     1byte        true, false 두가지만 표현 가능

// 정수형
// short 부호있는 정수형 2byte      -2^15 ~ 2^15 -1까지 표현 가능
// int   부호있는 정수형 4byte      -2^31 ~ 2^31 -1까지 표현 가능
// long  부호있는 정수형 8byte      -2^63 ~ 2^63 -1까지 표현 가능
// 할당된 메모리 크기가 크면 클수록 느려짐
// 그러나 short과 int의 속도가 비슷함 굳이 short를 쓴다면 상황상 용량을 아끼기 위해 사용함

// ushort 부호없는 정수형 2byte      0 ~ 2^16 -1까지 표현 가능
// uint   부호없는 정수형 4byte      0 ~ 2^32 -1까지 표현 가능
// ulong  부호없는 정수형 8byte      0 ~ 2^64 -1까지 표현 가능
// 음수 없이 정수만 표현 가능

// 실수형
// float  부동소수점 실수 4byte    3.4e-38  ~ 3.4e+38까지  표현 가능 소수점 7자리 까지 속도가 빠름
// double 부동소수점 실수 8byte    1.7e-308 ~ 1.7e+308까지 표현 가능 소수점 15자리 까지 정교함

// float은 값을 대입할때 값 뒤에 f를 붙여주는게 좋음

// 문자형
// char   유니코드 문자형  2byte   'a', 'b', 'c' ...
// string 유니코드 문자열  X       "abc", "안녕" ... 
// string은 불변성으로 인해 메모리 크기를 확실하게 정의 할 수 없음

//심화
//부동소수점
//아스키코드 유니코드

#endregion